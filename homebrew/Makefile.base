# Little-endian SH-4.
NAOMI_SH_CCFLAGS  = -ml
# Don't use the system standard library (We supply our own newlib-one with -lc in the link step).
NAOMI_SH_CCFLAGS += -nostdlib
# Don't use the system start files (We supply our own crt0).
NAOMI_SH_CCFLAGS += -nostartfiles
# Don't use GCC stack protection (its not needed on a kernel-less system).
NAOMI_SH_CCFLAGS += -fno-stack-protector
# We're making a free-standing binary.
NAOMI_SH_CCFLAGS += -ffreestanding
# Don't generate code that uses a frame pointer.
NAOMI_SH_CCFLAGS += -fomit-frame-pointer
# Put every object in its own section so the linker can trim dead code.
NAOMI_SH_CCFLAGS += -ffunction-sections -fdata-sections
# Add libnaomi to include path.
NAOMI_SH_CCFLAGS += -I$(dir $(abspath $(lastword $(MAKEFILE_LIST))))libnaomi/ -I${NAOMI_SH_BASE} -I${NAOMI_SH_BASE}/sh-elf
# Make sure we compile optimized
NAOMI_SH_CCFLAGS += -O2

# Set up gcc default options for compiling .c files.
CC  = ${NAOMI_SH_CC} ${NAOMI_SH_CCFLAGS}

# Little-endian SH-4.
NAOMI_SH_CPPFLAGS  = -ml
# Don't use the system standard library (We supply our own newlib-one with -lc in the link step).
NAOMI_SH_CPPFLAGS += -nostdlib
# Don't use the system start files (We supply our own crt0).
NAOMI_SH_CPPFLAGS += -nostartfiles
# Don't use GCC stack protection (its not needed on a kernel-less system).
NAOMI_SH_CPPFLAGS += -fno-stack-protector
# We're making a free-standing binary.
NAOMI_SH_CPPFLAGS += -ffreestanding
# Don't generate code that uses a frame pointer.
NAOMI_SH_CPPFLAGS += -fomit-frame-pointer
# Put every object in its own section so the linker can trim dead code.
NAOMI_SH_CPPFLAGS += -ffunction-sections -fdata-sections
# Add libnaomi to include path.
NAOMI_SH_CPPFLAGS += -I$(dir $(abspath $(lastword $(MAKEFILE_LIST))))libnaomi/ -I${NAOMI_SH_BASE} -I${NAOMI_SH_BASE}/sh-elf
# Make sure we compile optimized
NAOMI_SH_CPPFLAGS += -O2

# Set up gcc default options for compiling .cpp files.
CPP  = ${NAOMI_SH_CPP} ${NAOMI_SH_CPPFLAGS}

# Set up the libraries we care about.
NAOMI_SH_LDLIBPATHS  = -L${NAOMI_SH_BASE}/sh-elf/lib/ -L${NAOMI_SH_BASE}/lib/ -L${NAOMI_SH_BASE}/lib/gcc/sh-elf/${NAOMI_SH_GCC_VER}/
# Add the path to libnaomi, built in this repository.
NAOMI_SH_LDLIBPATHS += -L$(dir $(abspath $(lastword $(MAKEFILE_LIST))))libnaomi/

# SH-4 little endian ELF format.
NAOMI_SH_LDFLAGS  = -mshlelf
# Use our supplied naomi linkscript.
NAOMI_SH_LDFLAGS += -T$(dir $(abspath $(lastword $(MAKEFILE_LIST))))naomi.ld
# Garbage collect (trim dead functions)
NAOMI_SH_LDFLAGS += --gc-sections
# Add library paths so we can link against newlib-provided system libs.
NAOMI_SH_LDFLAGS += ${NAOMI_SH_LDLIBPATHS}

# Set up linker default options for linking the final elf file.
LD  = ${NAOMI_SH_LD} ${NAOMI_SH_LDFLAGS}

# Little endian SH-4
NAOMI_SH_ASFLAGS  = --isa sh4 -little

# Set up assembler default options for compiling .s files.
AS  = ${NAOMI_SH_AS} ${NAOMI_SH_ASFLAGS}

# Set up default options for objcopy, used for extracting the raw binary from the linked elf file.
OBJCOPY = ${NAOMI_SH_OBJCOPY}

# Set up default archiver, used for creating libraries.
AR  = ${NAOMI_SH_AR}

# Set up gcc default options for AICA .c files.
ARMCC  = ${NAOMI_ARM_CC}
# Set up processor flags.
ARMCC += -mcpu=arm7
# Don't use the system standard library (We supply our own stubs for necessary files).
# These largely have the same justification as their counterparts in the above CC section.
ARMCC += -ffreestanding -fomit-frame-pointer -nostdlib -nostartfiles -fno-stack-protector
# Add libnaomi to include path.
ARMCC += -I$(dir $(abspath $(lastword $(MAKEFILE_LIST))))libnaomi/
# # Make sure we compile optimized
ARMCC += -O4

# Set up assembler default options for AICA .s files.
ARMAS  = ${NAOMI_ARM_AS}
# Make sure to specify the correct arch.
ARMAS += -mcpu=arm7

# Set up linker default options for AICA binaries.
ARMLD  = ${NAOMI_ARM_LD}
# Make sure we use the right ELF format.
ARMLD += -marmelf
# Force linking with simple linkscript that guarantees entrypoint.
ARMLD += -T$(dir $(abspath $(lastword $(MAKEFILE_LIST))))aica.ld
# Add libnaomi to library path.
ARMLD += -L$(dir $(abspath $(lastword $(MAKEFILE_LIST))))libnaomi/
# Add system library paths so we can link against libgcc.
ARMLD += -L${NAOMI_ARM_BASE}/arm-eabi/lib/ -L${NAOMI_ARM_BASE}/lib/gcc/arm-eabi/${NAOMI_ARM_GCC_VER}/

# We don't have many libraries for ARM.
ARMLIBS ?= -lgcc

# Set up default options for objcopy, used for extracting the raw binary from the linked elf file.
ARMOBJCOPY = ${NAOMI_ARM_OBJCOPY}

# Set up default archiver, used for creating libraries.
ARMAR = ${NAOMI_ARM_AR}

# Set up various toolchain utilities.
BIN2C = python3 $(dir $(abspath $(lastword $(MAKEFILE_LIST))))tools/bin2c.py

# Set up various toolchain utilities.
ADDR = python3 $(dir $(abspath $(lastword $(MAKEFILE_LIST))))tools/addr.py

# Set up various toolchain utilities.
DATE = python3 $(dir $(abspath $(lastword $(MAKEFILE_LIST))))tools/date.py

# A List of source files that should be included.
SRCS ?=

# A list of libraries that should be linked against.
LIBS ?= -lnaomi -lc -lm -lgcc -lstdc++

# The desired start address of the executable. Its totally okay to leave this alone.
START_ADDR = 0xc021000

# The entrypoint for the main executable. The default crt0 and linkscript put this at
# the start addr. If you provide a custom linker/crt0 you can overwrite this.
MAIN_ADDR = $(shell ${ADDR} ${START_ADDR} 0)

# The entrypoint for the test executable. The default crt0 and linkscript put this at
# the start addr + 4. If you provide a custom linker/crt0 you can overwrite this.
TEST_ADDR = $(shell ${ADDR} ${START_ADDR} 4)

# The serial number for your game. Should be unique for every released game as well
# as every released homebrew. Override this in your Makefile to change it to something
# else. Note that it must start with "B" and have 3 ascii digits following, usually
# two capital letters followed by a number.
SERIAL ?= B999

OBJS = $(patsubst %.cpp, build/%.o, $(patsubst %.s, build/%.o, $(patsubst %.c, build/%.o, $(SRCS))))

# A rule for how we go from the final built elf file to a raw binary for extracting.
build/%.bin: build/%.elf
	@mkdir -p $(dir $@)
	${OBJCOPY} $< $@ -O binary

# A rule for how we go about building the elf file from objects.
build/%.elf: ${OBJS}
	@mkdir -p $(dir $@)
	${LD} -defsym START_ADDR=${START_ADDR} -o $@ $^ ${LIBS}

# A rule for how to build assembly files. Depends on the build dir being created.
# This runs the C preprocessor for convenience, so you can #define registers and
# such in your assembly files.
build/%.o: %.s
	@mkdir -p $(dir $@)
	cp $< $@.renamed.S
	${NAOMI_SH_CC} -E $@.renamed.S > $@.preprocessed.s
	${AS} -o $@ $@.preprocessed.s

# A rule for how to build C files. Depends on the build dir being created.
build/%.o: %.c
	@mkdir -p $(dir $@)
	${CC} -c $< -o $@ -DSERIAL=\"${SERIAL}\" -DBUILD_DATE=$(shell ${DATE})

# A rule for how to build C++ files. Depends on the build dir being created.
build/%.o: %.cpp
	@mkdir -p $(dir $@)
	${CPP} -c $< -o $@ -DSERIAL=\"${SERIAL}\" -DBUILD_DATE=$(shell ${DATE})

# Mark intermediate build files as precious in case we need to examine them later.
.PRECIOUS: ${OBJS}
.PRECIOUS: build/%.elf
.PRECIOUS: build/%.bin
